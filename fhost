#!/bin/bash

ARG1=$1
ARG2=$2
FHOST_VERSION="0.3"
FHOST_BUILD="0.3.0"
OS=""

if [[ $EUID -ne 0 ]]; then
    echo "FHost requires root privileges"
    exit 1
fi

source /etc/os-release
if [ "$ID" == "debian" ] && [ "$VERSION_ID" == "10" ]; then
    OS="debian10"
elif [ "$ID" == "debian" ] && [ "$VERSION_ID" == "9" ]; then
    OS="debian9"
fi

################## BEGIN - INSTALL SERVER ##################
if [ "$ARG1" == "install" ] && [ "$ARG2" == "server" ]; then
    if [ "$OS" == "debian10" ] || [ "$OS" == "debian9" ]; then
        apt update
        apt -y install apache2 php mariadb-server
        mysql_secure_installation

        ./fhost install client
    else
        echo -e "\nOS NOT SUPPORTED\n"
    fi
################## END - INSTALL SERVER ##################

################## BEGIN - INSTALL CLIENT ##################
elif [ "$ARG1" == "install" ] && [ "$ARG2" == "client" ]; then
    mkdir -p /var/www/fhost
    mkdir -p /var/www/fhost/backup
    mkdir -p /etc/fhost
    mkdir -p /etc/fhost/templates
    touch /etc/fhost/fhost.log
    touch /etc/fhost/vhosts

    cp ./fhost /bin/fhost
	chown root:root /bin/fhost
	chmod 770 /bin/fhost

    echo ""
    echo "FHOST INSTALLED"
    echo ""
################## END - INSTALL CLIENT ##################


################## BEGIN - UNINSTALL CLIENT ##################
elif [ "$ARG1"  == "uninstall" ] && [ "$ARG2" == "client" ]; then

    rm /bin/fhost

    echo ""
    echo "FHOST UNINSTALLED"
    echo ""
################## END - UNINSTALL CLIENT ##################



################## BEGIN ADD VHOST ##############################
elif [ "$ARG1" == "add" ] && [ "$ARG2" == "vhost" ]; then

	echo -n "Domain Name: "
	read DOMAIN
    echo -n "DB Password: "
    read -s DB_PASSWORD
    echo ""
    echo -n "Confirm DB Password: "
    read -s CONFIRM_DB_PASSWORD
    echo ""

    if [ "$DB_PASSWORD" != "$CONFIRM_DB_PASSWORD" ]; then
        echo -e "\nPasswords do not match\n"
        exit 1
    fi

if grep -Fxq "$DOMAIN" /etc/fhost/vhosts ;  then
		echo "################################"
		echo "#  Domain Name already exists  #"
		echo "################################"

else

	echo $DOMAIN >> /etc/fhost/vhosts
	mkdir /var/www/fhost/$DOMAIN
	mkdir /var/www/fhost/$DOMAIN/html
	touch /var/www/fhost/$DOMAIN/html/index.html
	cat > /var/www/fhost/$DOMAIN/html/index.html << EOF
<html>
	<head>
	</head>
	<body><center><b>$DOMAIN</b></center></body>
</html>
EOF
	chown -R root:www-data /var/www/fhost/$DOMAIN
	chmod -R 777 /var/www/fhost/$DOMAIN

	touch /etc/apache2/sites-available/$DOMAIN-fhost.conf
	cat > /etc/apache2/sites-available/$DOMAIN-fhost.conf << EOF
<VirtualHost *:80>
    ServerName $DOMAIN
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/fhost/$DOMAIN/html

    <Directory /var/www/fhost/$DOMAIN/html/>
        AllowOverride All
        Options -Indexes
        Require all granted
    </Directory>
		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF
	cd /etc/apache2/sites-available
	a2ensite $DOMAIN-fhost.conf > /etc/fhost/fhost.log 2>&1
	systemctl reload apache2

	echo -n "ROOT PASSWORD FOR MYSQL: "
	read -s MYSQL_ROOT

    echo "" > /etc/fhost/temp.sql
	cat > /etc/fhost/temp.sql << EOF
CREATE DATABASE \`$DOMAIN\`;
CREATE USER \`$DOMAIN\`@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL ON \`$DOMAIN\`.* TO \`$DOMAIN\`@'localhost';
EOF

	mysql -u'root' -p$MYSQL_ROOT < /etc/fhost/temp.sql
	echo "" > /etc/fhost/temp.sql

echo -e "\n"
echo "###########################################"
echo "DB HOST: localhost"
echo "DB NAME: $DOMAIN"
echo "DB USER: $DOMAIN"
echo "DB PASSWORD: ********"
echo "###########################################"

fi

echo -e "Do you want to add $DOMAIN in /etc/hosts for accessing it locally? (yes/NO)\n"
read RET
if [ $RET == 'yes' ] || [ $RET == 'YES' ] || [ $RET == 'y' ] || [ $RET == 'Y' ]; then
	echo -e "127.0.0.1 $DOMAIN\n" >> /etc/hosts
fi
################## END ADD VHOST ##############################



################## BEGIN DEL VHOST ##############################
elif [ "$ARG1" == "del" ] && [ "$ARG2" == "vhost" ]; then
	cat /etc/fhost/vhosts
	echo -e "\n"
	echo -n "VHOST TO DELETE: "
	read VHOST_TO_DELETE

if [ "$VHOST_TO_DELETE" == "" ]; then
	exit
fi


	if grep -Fxq "$VHOST_TO_DELETE" /etc/fhost/vhosts ;  then
	rm -rf /var/www/fhost/$VHOST_TO_DELETE

	cd /etc/apache2/sites-available
	a2dissite $VHOST_TO_DELETE-fhost.conf > /etc/fhost/fhost.log 2>&1
	rm /etc/apache2/sites-available/$VHOST_TO_DELETE-fhost.conf
	systemctl reload apache2

	echo -n "ROOT PASSWORD FOR MYSQL: "
	read -s MYSQL_ROOT

	echo "" > /etc/fhost/temp.sql
	cat > /etc/fhost/temp.sql << EOF
DROP DATABASE \`$VHOST_TO_DELETE\`;
DROP USER \`$VHOST_TO_DELETE\`@'localhost';
EOF
	mysql -u'root' -p$MYSQL_ROOT < /etc/fhost/temp.sql
	echo "" > /etc/fhost/temp.sql

sed -i /$VHOST_TO_DELETE/d /etc/fhost/vhosts
sed -i /$VHOST_TO_DELETE/d /etc/hosts

echo -e "\n"

else
	echo -e "\n"
	echo "################################"
	echo "#    Domain Name not exists    #"
	echo "################################"
fi
################## END DEL VHOST ##############################



################## BEGIN LIST VHOSTS ##############################
elif [ "$ARG1" == "list" ] && [ "$ARG2" == "vhosts" -o "$ARG2" == "vhost" -o "$ARG2" == "" ]; then

    echo ""
    cat /etc/fhost/vhosts
    echo ""

################## END LIST VHOSTS ##############################



################## BEGIN BACKUP #################################
elif [ "$ARG1" == "backup" ] && [ "$ARG2" == "" ]; then

    fhost list vhosts

    echo -ne "\nVHOST to backup: "
    read VHOST_TO_BACKUP

    echo -ne "\nROOT PASSWORD FOR MYSQL: "
	read -s MYSQL_ROOT
    echo -e "\n"

    DATETIME=$(date +%Y%m%d_%H%M)
    tar -cvzf /tmp/${VHOST_TO_BACKUP}_fhost_FS_${DATETIME}.tgz /var/www/fhost/${VHOST_TO_BACKUP}
    mysqldump -u'root' -p$MYSQL_ROOT $VHOST_TO_BACKUP > /tmp/${VHOST_TO_BACKUP}_fhost_${DATETIME}.sql

    tar -cvzf /var/www/fhost/backup/${VHOST_TO_BACKUP}_fhost_${DATETIME}.tgz /tmp/${VHOST_TO_BACKUP}_fhost_FS_${DATETIME}.tgz \
    /tmp/${VHOST_TO_BACKUP}_fhost_${DATETIME}.sql

    rm /tmp/${VHOST_TO_BACKUP}_fhost_FS_${DATETIME}.tgz
    rm /tmp/${VHOST_TO_BACKUP}_fhost_${DATETIME}.sql

    echo -e "\n"
	echo "################################"
	echo "#       BACKUP COMPLETED       #"
	echo "################################"

    echo -e "\n\n"
    echo -e "Backup Directory: /var/www/fhost/backup\n"

################## END BACKUP ###################################


################## BEGIN - VERSION ##################
elif [ "$ARG1" == "version" ] || [ "$ARG1" == "-v" ] || \
     [ "$ARG1" == "--version" ] || [ "$ARG1" == "-version" ] || \
     [ "$ARG1" == "--v" ]; then

    echo -e "\nFHost - Version: $FHOST_VERSION   Build: $FHOST_BUILD\n"
    echo -e "Fast Hosting Management\n"

################## END - VERSION ##################

else
    echo -e "\nFHost - Version: $FHOST_VERSION   Build: $FHOST_BUILD\n"
    echo -e "Fast Hosting Management\n"
fi
